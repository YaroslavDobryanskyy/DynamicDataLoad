<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/12/2021 2:22:22 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="HIPPO"
  DTS:CreatorName="SOFTSERVE\ydobryan"
  DTS:DTSID="{277BF412-0D7B-4F99-B4D0-83203F00B4A0}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.150"
  DTS:LocaleID="1058"
  DTS:ObjectName="LoadXLSFile"
  DTS:PackageType="5"
  DTS:VersionBuild="31"
  DTS:VersionGUID="{211FD0E4-8A36-430E-B0E9-91AF5B36D161}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SCP Load From EXCEL"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{F5AE101A-A376-4C38-AB1C-945E4908D4B8}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SCP Load From EXCEL"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::SourceFileFolder,$Project::ProcessedFileFolder,$Project::ErrorFileFolder,$Project::ServerName,$Project::DatabaseName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Settings.get_Default():ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Sett" +
    "ings")]

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4C3D983B-0276-4457-B0D1-B26642717B7E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_fb8de060028a49729cbe0e1f0d7ea8c1</RootNamespace>
    <AssemblyName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
#endregion

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection mySQLConn = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            try
            {

                //Declare Variables
                string SourceFolderPath = Dts.Variables["$Project::SourceFileFolder"].Value.ToString();
                string ArchiveFolder = Dts.Variables["$Project::ProcessedFileFolder"].Value.ToString();
                string ServerName = Dts.Variables["$Project::ServerName"].Value.ToString();
                string DatabaseName = Dts.Variables["$Project::DatabaseName"].Value.ToString();

                string ColumnsDataType = "NVARCHAR(500)";
                string SchemaName = "dbo";

                string SQLConnString = "Server = " + ServerName + ";Initial Catalog=" + DatabaseName + "; Integrated Security = SSPI;";
                SqlConnection MSSQLConn = new SqlConnection(SQLConnString);
                MSSQLConn.Open();

                string[] fileEntries = Directory.GetFiles(SourceFolderPath, "*.XLS*");
                
                //Processing XLS files  one by one
                foreach (string fileName in fileEntries)
                {
                    // CRreating OLEDB Connection for XLS
                    string XLSConnString = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 12.0;HDR=yes'", fileName);
                    using (OleDbConnection connection = new OleDbConnection(XLSConnString))
                    {
                        connection.Open();
                        // Getting information about worksheets names
                        DataTable dt = connection.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, null);

                        // Processing each worksheet
                        foreach (DataRow row in dt.Rows)
                        {
                            string SheetName = (String)row["TABLE_NAME"];
                            int index = 0;
                            int rows = 0;
                            string ColumnList = "";
                            string TableName = "";
                            OleDbCommand command = new OleDbCommand(string.Format("select * from [{0}]", SheetName), connection);
                            using (OleDbDataReader dr = command.ExecuteReader())
                            {

                             
                                while (dr.Read())
                                {
                                    if (index == 0)
                                    {
                                        rows = dr.FieldCount;

                                        for (int i = 0; i < rows; i++)
                                        {
                                            ColumnList += string.Format("[COLUMN{0}],", i.ToString());
                                        }
                                        ColumnList = ColumnList.Remove(ColumnList.Length - 1);
                                        
                                        TableName = (((fileName.ToUpper().Replace(SourceFolderPath.ToUpper(), "")).Replace(".XLSX", "").Replace(".XLS", "")).Replace("\\", "")) + "_";
                                        TableName += SheetName.ToUpper().Replace("$", "");
                                        string CreateTableStatement = "DROP TABLE IF EXISTS [" + TableName + "];";
                                        CreateTableStatement += " CREATE TABLE " + SchemaName + ".[" + TableName + "]";
                                        CreateTableStatement += "("+ ColumnList.Replace("]",string.Format("] {0}", ColumnsDataType)) + ")";
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, MSSQLConn);
                                        CreateTableCmd.ExecuteNonQuery();

                                    }
                                    string query = "INSERT INTO " + SchemaName + ".[" + TableName + "](" + ColumnList + ") VALUES(";

                                    for (int i = 0; i < rows; i++)
                                    {
                                        var cell = dr[i];
                                        query += string.Format("'{0}',",cell.ToString().Replace("'","''"));
                                    }
                                    query = query.Remove(query.Length - 1);
                                    query += ")";
                                    SqlCommand MSSQLCmd = new SqlCommand(query, MSSQLConn);
                                    MSSQLCmd.ExecuteNonQuery();
                                    index++;
                                }
                            }
                        }

                    }
                
                    //move the file to archive folder after adding datetime to it
                    File.Move(fileName,  ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "").Replace(".","_" + datetime +".")));
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
                MSSQLConn.Close();
            }
            catch (Exception exception)
            {
                // Create Log File for Errors
                using (StreamWriter sw = File.CreateText(Dts.Variables["$Project::ErrorFileFolder"].Value.ToString()
                                    + "\\" + "ErrorLog_" + datetime + ".log"))
                {
                    sw.WriteLine(exception.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }

            }

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</msb:DisplayName>
    <msb:ProjectId>{0627BEB0-CC2B-4923-8FC4-4D42F4C8FEFE}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_fb8de060028a49729cbe0e1f0d7ea8c1.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_fb8de060028a49729cbe0e1f0d7ea8c1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_fb8de060028a49729cbe0e1f0d7ea8c1")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFcO/18AAAAAAAAAAOAAIiALATAAABwAAAAIAAAAAAAAcjoA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACA6AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAeBoAAAAgAAAAHAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAeAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABU
OgAAAAAAAEgAAAACAAUAxCUAAKQTAAABAAAAAAAAAGg5AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswCACCBAAAAQAAESgQAAAKCxIBcgEAAHAoEQAACgoCKBIA
AApvEwAACnIfAABwbxQAAApvFQAACm8WAAAKDAIoEgAACm8TAAAKclUAAHBvFAAACm8VAAAKbxYA
AAoNAigSAAAKbxMAAApykQAAcG8UAAAKbxUAAApvFgAAChMEAigSAAAKbxMAAApyuwAAcG8UAAAK
bxUAAApvFgAAChMFcukAAHATBnIFAQBwEwcbjSMAAAElFnINAQBwoiUXEQSiJRhyIQEAcKIlGREF
oiUackUBAHCiKBcAAApzGAAAChMIEQhvGQAACghygQEAcCgaAAAKEwkWEwo4GAMAABEJEQqaEwty
jwEAcBELKBsAAApzHAAAChMMEQxvGQAAChEMfh0AAAoUbx4AAApvHwAACm8gAAAKEw04XQIAABEN
byEAAAp0KwAAAXJGAgBwbyIAAAp0IwAAARMOFhMPFhMQclwCAHATEXJcAgBwExJyXgIAcBEOKBsA
AAoRDHMjAAAKbyQAAAoTEzjzAQAAEQ86NgEAABETbyUAAAoTEBYTFisgERFyhgIAcBIWKCYAAAoo
GwAACignAAAKExERFhdYExYRFhEQMtoRERERbygAAAoXWW8pAAAKExERC28qAAAKCG8qAAAKclwC
AHBvKwAACnKgAgBwclwCAHBvKwAACnKsAgBwclwCAHBvKwAACnK2AgBwclwCAHBvKwAACnK6AgBw
KCcAAAoTEhESEQ5vKgAACnK+AgBwclwCAHBvKwAACignAAAKExJywgIAcBEScvACAHAoLAAAChMV
HI0jAAABJRYRFaIlF3L2AgBwoiUYEQeiJRlyFAMAcKIlGhESoiUbchoDAHCiKBcAAAoTFREVch4D
AHAREXIaAwBwciIDAHARBigbAAAKbysAAApyLgMAcCgtAAAKExURFREIcy4AAApvLwAACiYdjSMA
AAElFnIyAwBwoiUXEQeiJRhyFAMAcKIlGRESoiUackwDAHCiJRsREaIlHHJSAwBwoigXAAAKExQW
ExcrOhETERdvMAAAChMYERRyZgMAcBEYbxYAAApydAMAcHJ4AwBwbysAAAooGwAACignAAAKExQR
FxdYExcRFxEQMsARFBEUbygAAAoXWW8pAAAKExQRFHIuAwBwKCcAAAoTFBEUEQhzLgAACm8vAAAK
JhEPF1gTDxETbzEAAAo6Af7//94MERMsBxETbzIAAArcEQ1vMwAACjqX/f//3hURDXUVAAABExkR
GSwHERlvMgAACtzeDBEMLAcRDG8yAAAK3BELCXK2AgBwEQsIclwCAHBvKwAACnJ+AwBwcroCAHAG
cn4DAHAoLAAACm8rAAAKKCwAAAooNAAACgIoEgAAChZvNQAAChEKF1gTChEKEQmOaT/d/P//EQhv
NgAACt5iExoCKBIAAApvEwAACnKCAwBwbxQAAApvFQAACm8WAAAKcrYDAHAGcswDAHAoLQAACig3
AAAKExsRGxEabxYAAApvOAAACgIoEgAAChdvNQAACt4MERssBxEbbzIAAArc3gAqAABBfAAAAgAA
AH0BAAAGAgAAgwMAAAwAAAAAAAAAAgAAAC0BAABwAgAAnQMAABUAAAAAAAAAAgAAAA0BAACnAgAA
tAMAAAwAAAAAAAAAAgAAAFcEAAAcAAAAcwQAAAwAAAAAAAAAAAAAABMAAAAMBAAAHwQAAGIAAAAW
AAABHgIoOQAACioeAig6AAAKKq5+AQAABC0ectYDAHDQAwAAAig7AAAKbzwAAApzPQAACoABAAAE
fgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKD4AAAoqLnMIAAAGgAMAAAQqAABCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAA0BQAAI34AAKAFAACUBwAAI1N0cmluZ3MAAAAA
NA0AAEgEAAAjVVMAfBEAABAAAAAjR1VJRAAAAIwRAAAYAgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJ
AwAAAPoBMwAWAAABAAAANQAAAAUAAAAGAAAACQAAAAEAAAA+AAAAAgAAABAAAAABAAAAAgAAAAMA
AAAEAAAAAQAAAAUAAAABAAAAAQAAAAAAWgQBAAAAAAAGAPMC1AUGAIID1AUGAD8CwQUPAEgGAAAG
AGwC3QQGANYC3QQGALcC3QQGAGkD3QQGABMD3QQGACwD3QQGAIMC3QQGAJ4CvAMKAEcDCQQKAJUB
CQQGAC0BiwQOABEFFwcOAAEFcQAGAJoFrQYOAEgFcQAGAPUGiwQGAPgAiwQGAB8FiwQGAIIFNAAG
AJIEiwQGACICwQUGAGoF9AUGADwFyAQSAPIBRAQSAFMCRAQSAMwBswQGAAcC1AUKADIECQQWAJEG
NgEWAO8ANgEGANgDiwQOAAQFKQUGAIkHNAAOAJEAcQAGAJwAiwQOAOUAZQAOAO8EZQAOALEBZQAO
AGQHZQAOAKEAcQAOAEsFKQUGACUAiwQOAK4AFwcOAKQAKQUGACgBNAAGAI8FNAAGAGABiwQGAAQB
iwQGAHAH3QQAAAAAKwAAAAAAAQABAAEAEACoBAEAOQABAAEAAAAQAPsFVwZRAAEAAwAAARAApAZX
BnkAAwAHAAMBAADQBgAAYQAEAAoAEQCXBBoBEQCFAR4BEQDBACIBBgZdACYBVoDABikBVoBlASkB
UCAAAAAAhgCuBAYAAQBcJQAAAACGGLQFBgABAGQlAAAAAIMYtAUGAAEAbCUAAAAAkwhmBS0BAQCY
JQAAAACTCG0BMgEBAJ8lAAAAAJMIeQE3AQEApyUAAAAAlgj8Bj0BAgCuJQAAAACGGLQFBgACALYl
AAAAAJEYugVCAQIAAAABAKoDCQC0BQEAEQC0BQYAGQC0BQoAKQC0BRAAMQC0BRAAOQC0BRAAQQC0
BRAASQC0BRAAUQC0BRAAWQC0BRAAYQC0BRAAaQC0BQYAyQC0BQYA6QC0BRUA+QC0BQYAeQBcB0MA
eQDWA0gAcQDIBk0AAQGNBlMACQGCBFkAEQGgA2AAoQDWA2QAGQHnBmgAgQC0BRAAIQGjBAYAKQGb
Bm4AGQHuBnUAiQC0BRAAMQGGBnsAiQDRAIAAQQHeBosAUQGmBZEAkQAtB2AAWQGCBJYAYQG0BZsA
YQFYBaIAaQE5B6cAcQHWA2QAGQHnBqsAGQHfA6cAGQG1A7EAGQF6BWQAGQG5ALYAGQHnBrwAGQHn
BsMAeQG0BcsAgQF5B6cAaQGCBNIAaQGMANcAqQDqAQYAkQBIB9cAiQGwA9sAAQEIBwEAIQHkAQYA
iQFRB+EAkQFWARAAcQC0BQYAoQC0BQYAmQEWAecAmQFsB/AA0QC0BfYA8QC0BQYACAAUABABCAAY
ABUBKQBzAH0BLgALAFUBLgATAF4BLgAbAH0BLgAjAIYBLgArAK8BLgAzAK8BLgA7AK8BLgBDAIYB
LgBLALUBLgBTAK8BLgBbAMwBQwBjABUBSQBzAH0BYQB7ABUBYwBrABUBGwADAAEABAADAAAAagVG
AQAAjQFLAQAAAAdQAQIABAADAAIABQAFAAEABgAFAAIABwAHAASAAAABAAAAAx47eQAAAAAAAAEA
AAAEAAAAAAAAAAAAAAD+AIMAAAAAAA8AAAAAAAAAAAAAAAcB6gMAAAAABAAAAAAAAAAAAAAA/gBl
AAAAAAAEAAAAAAAAAAAAAAD+AIsEAAAAAA8AAAAAAAAAAAAAAAcBPgAAAAAAAAAAAAEAAAAFBgAA
BQACAAAAAAAAU1RfZmI4ZGUwNjAwMjhhNDk3MjljYmUwZTFmMGQ3ZWE4YzEASW50MzIAPE1vZHVs
ZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3Rl
bS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFJlYWQAT2xlRGJTY2hlbWFHdWlkAE9s
ZURiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAEdldE9sZURiU2No
ZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEZpbGUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBXcml0ZUxpbmUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJl
c291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29s
bGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JC
cm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAE1vdmUAUmVtb3ZlAFN5c3Rl
bS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAZ2V0X0xlbmd0aABNaWNyb3NvZnQuU3FsU2Vy
dmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBT
Y3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfZmI4ZGUwNjAwMjhhNDk3
MjljYmUwZTFmMGQ3ZWE4YzEuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9w
ZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AU3FsQ29u
bmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAE9sZURiRGF0
YVJlYWRlcgBFeGVjdXRlUmVhZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAVG9VcHBlcgBTdHJlYW1X
cml0ZXIAVGV4dFdyaXRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBT
eXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0u
UmVzb3VyY2VzAFNUX2ZiOGRlMDYwMDI4YTQ5NzI5Y2JlMGUxZjBkN2VhOGMxLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9mYjhkZTA2MDAyOGE0OTcyOWNi
ZTBlMWYwZDdlYThjMS5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFNl
dHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBn
ZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABT
eXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0ZpZWxkQ291bnQATW92ZU5leHQA
Q3JlYXRlVGV4dABnZXRfTm93AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBE
aXJlY3RvcnkAAAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAA1JABQAHIAbwBqAGUAYwB0
ADoAOgBTAG8AdQByAGMAZQBGAGkAbABlAEYAbwBsAGQAZQByAAA7JABQAHIAbwBqAGUAYwB0ADoA
OgBQAHIAbwBjAGUAcwBzAGUAZABGAGkAbABlAEYAbwBsAGQAZQByAAApJABQAHIAbwBqAGUAYwB0
ADoAOgBTAGUAcgB2AGUAcgBOAGEAbQBlAAAtJABQAHIAbwBqAGUAYwB0ADoAOgBEAGEAdABhAGIA
YQBzAGUATgBhAG0AZQAAG04AVgBBAFIAQwBIAEEAUgAoADUAMAAwACkAAAdkAGIAbwAAE1MAZQBy
AHYAZQByACAAPQAgAAAjOwBJAG4AaQB0AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AAA7OwAgAEkA
bgB0AGUAZwByAGEAdABlAGQAIABTAGUAYwB1AHIAaQB0AHkAIAA9ACAAUwBTAFAASQA7AAANKgAu
AFgATABTACoAAIC1UAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAu
AE8ATABFAEQAQgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQB7ADAAfQA7AEUA
eAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAnAEUAeABjAGUAbAAgADEAMgAu
ADAAOwBIAEQAUgA9AHkAZQBzACcAARVUAEEAQgBMAEUAXwBOAEEATQBFAAABACdzAGUAbABlAGMA
dAAgACoAIABmAHIAbwBtACAAWwB7ADAAfQBdAAAZWwBDAE8ATABVAE0ATgB7ADAAfQBdACwAAAsu
AFgATABTAFgAAAkuAFgATABTAAADXAAAA18AAAMkAAAtRABSAE8AUAAgAFQAQQBCAEwARQAgAEkA
RgAgAEUAWABJAFMAVABTACAAWwAABV0AOwAAHSAAQwBSAEUAQQBUAEUAIABUAEEAQgBMAEUAIAAA
BS4AWwAAA10AAAMoAAALXQAgAHsAMAB9AAADKQAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAAAF
XQAoAAATKQAgAFYAQQBMAFUARQBTACgAAA0nAHsAMAB9ACcALAABAycAAQUnACcAAQMuAAAzJABQ
AHIAbwBqAGUAYwB0ADoAOgBFAHIAcgBvAHIARgBpAGwAZQBGAG8AbABkAGUAcgAAFVwARQByAHIA
bwByAEwAbwBnAF8AAAkuAGwAbwBnAABxUwBUAF8AZgBiADgAZABlADAANgAwADAAMgA4AGEANAA5
ADcAMgA5AGMAYgBlADAAZQAxAGYAMABkADcAZQBhADgAYwAxAC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAADwEsnyr58GSZ4aJQVXVCDwAAQgAQEIAyAAAQUgAQEREQQg
AQEOBSABARFxJwccDhE9Dg4ODg4OEkEdDggOEkUSSQ4ICA4OEk0ODggIHBJVElkSXQQAABE9BCAB
Dg4FIAASgIEFIAASgIUGIAESgIkcAyAAHAMgAA4FAAEOHQ4GAAIdDg4OBQACDg4cBAYRgJ0KIAIS
gKERgJ0dHAUgABKApQQgABJJBCABHA4GIAIBDhJFBCAAEk0DIAAIBQACDg4OBCABDggFIAIODg4G
AAMODg4OBwAEDg4ODg4GIAIBDhJBBCABHAgDIAACBQACAQ4OBQABEl0OCAABEoDNEYDRBSAAEoDV
ByACAQ4SgNUIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSaQMGEm0DBhIQAgYIAwYRFAQA
ABJpBAAAEm0FAAEBEm0EAAASEAMAAAEECAASaQQIABJtBAgAEhAIAQAIAAAAAAAeAQABAFQCFldy
YXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2ZiOGRlMDYwMDI4YTQ5NzI5Y2Jl
MGUxZjBkN2VhOGMxAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjEAAEkBABouTkVURnJhbWV3
b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsg
NC43AAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1z
Y29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49
Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAA
AAAAAAAAAFBBRFBBRFC0AAAASDoAAAAAAAAAAAAAYjoAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFQ6AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQA7eQMeAAABADt5Ax4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfAGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAAZAA3
AGUAYQA4AGMAMQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADYA
OAAzAC4AMwAxADAAMwA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABf
AGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAAZAA3AGUA
YQA4AGMAMQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQA
ZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8AZgBiADgAZABlADAANgAwADAAMgA4AGEANAA5ADcAMgA5AGMAYgBlADAAZQAxAGYA
MABkADcAZQBhADgAYwAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfAGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAA
ZAA3AGUAYQA4AGMAMQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANwA2ADgAMwAuADMAMQAwADMANQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANwA2ADgAMwAuADMAMQAwADMANQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAB0OgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="189.6,41.6"
          Id="Package\SCP Load From EXCEL"
          TopLeft="162.142859904134,73.258824525237" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>