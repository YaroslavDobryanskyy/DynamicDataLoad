<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/12/2021 2:22:22 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="HIPPO"
  DTS:CreatorName="SOFTSERVE\ydobryan"
  DTS:DTSID="{277BF412-0D7B-4F99-B4D0-83203F00B4A0}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.150"
  DTS:LocaleID="1058"
  DTS:ObjectName="LoadXLSFile"
  DTS:PackageType="5"
  DTS:VersionBuild="38"
  DTS:VersionGUID="{BDD44D57-E829-46CA-9DD5-7F5706892861}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SCP Load From EXCEL"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{F5AE101A-A376-4C38-AB1C-945E4908D4B8}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SCP Load From EXCEL"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::SourceFileFolder,$Project::ProcessedFileFolder,$Project::ErrorFileFolder,$Project::ServerName,$Project::DatabaseName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4C3D983B-0276-4457-B0D1-B26642717B7E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_fb8de060028a49729cbe0e1f0d7ea8c1</RootNamespace>
    <AssemblyName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
#endregion

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection mySQLConn = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            const string OLEDBProvider = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 12.0;HDR=no;IMEX=1;Importmixedtypes=text;'";
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            try
            {

                //Declare Variables
                string SourceFolderPath = Dts.Variables["$Project::SourceFileFolder"].Value.ToString();
                string ArchiveFolder = Dts.Variables["$Project::ProcessedFileFolder"].Value.ToString();
                string ServerName = Dts.Variables["$Project::ServerName"].Value.ToString();
                string DatabaseName = Dts.Variables["$Project::DatabaseName"].Value.ToString();

                string ColumnsDataType = "NVARCHAR(500)";
                string SchemaName = "dbo";

                string SQLConnString = "Server = " + ServerName + ";Initial Catalog=" + DatabaseName + "; Integrated Security = SSPI;";
                SqlConnection MSSQLConn = new SqlConnection(SQLConnString);
                MSSQLConn.Open();

                string[] fileEntries = Directory.GetFiles(SourceFolderPath, "*.XLS*");
                
                //Processing XLS files  one by one
                foreach (string fileName in fileEntries)
                {
                    // CRreating OLEDB Connection for XLS
                    string XLSConnString = string.Format(OLEDBProvider, fileName);
                    using (OleDbConnection connection = new OleDbConnection(XLSConnString))
                    {
                        connection.Open();
                        // Getting information about worksheets names
                        DataTable dt = connection.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables, null);

                        // Processing each worksheet
                        foreach (DataRow row in dt.Rows)
                        {
                            string SheetName = (String)row["TABLE_NAME"];
                            int index = 0;
                            int rows = 0;
                            string ColumnList = "";
                            string TableName = "";
                            OleDbCommand command = new OleDbCommand(string.Format("select * from [{0}]", SheetName), connection);
                            using (OleDbDataReader dr = command.ExecuteReader())
                            {

                             
                                while (dr.Read())
                                {
                                    if (index == 0)
                                    {
                                        rows = dr.FieldCount;

                                        for (int i = 0; i < rows; i++)
                                        {
                                            ColumnList += string.Format("[COLUMN{0}],", i.ToString());
                                        }
                                        ColumnList = ColumnList.Remove(ColumnList.Length - 1);
                                        
                                        TableName = (((fileName.ToUpper().Replace(SourceFolderPath.ToUpper(), "")).Replace(".XLSX", "").Replace(".XLS", "")).Replace("\\", "")) + "_";
                                        TableName += SheetName.ToUpper().Replace("$", "");
                                        string CreateTableStatement = "DROP TABLE IF EXISTS [" + TableName + "];";
                                        CreateTableStatement += " CREATE TABLE " + SchemaName + ".[" + TableName + "]";
                                        CreateTableStatement += "(RowID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,"+ ColumnList.Replace("]",string.Format("] {0}", ColumnsDataType)) + ")";
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, MSSQLConn);
                                        CreateTableCmd.ExecuteNonQuery();

                                    }
                                    string query = "INSERT INTO " + SchemaName + ".[" + TableName + "](" + ColumnList + ") VALUES(";

                                    for (int i = 0; i < rows; i++)
                                    {
                                        //var cell = dr[i];
                                        string cell = dr.GetValue(i).ToString();
                                        query += string.Format("'{0}',",cell.Replace("'","''"));
                                    }
                                    query = query.Remove(query.Length - 1);
                                    query += ")";
                                    SqlCommand MSSQLCmd = new SqlCommand(query, MSSQLConn);
                                    MSSQLCmd.ExecuteNonQuery();
                                    index++;
                                }
                            }
                        }

                    }
                
                    //move the file to archive folder after adding datetime to it
                    File.Move(fileName,  ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "").Replace(".","_" + datetime +".")));
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
                MSSQLConn.Close();
            }
            catch (Exception exception)
            {
                // Create Log File for Errors
                using (StreamWriter sw = File.CreateText(Dts.Variables["$Project::ErrorFileFolder"].Value.ToString()
                                    + "\\" + "ErrorLog_" + datetime + ".log"))
                {
                    sw.WriteLine(exception.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }

            }

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_fb8de060028a49729cbe0e1f0d7ea8c1</msb:DisplayName>
    <msb:ProjectId>{40D0B0D3-82B7-4A64-AE94-69254FA3DBAB}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_fb8de060028a49729cbe0e1f0d7ea8c1.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Settings.get_Default():ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Sett" +
    "ings")]

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_fb8de060028a49729cbe0e1f0d7ea8c1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_fb8de060028a49729cbe0e1f0d7ea8c1")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_fb8de060028a49729cbe0e1f0d7ea8c1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_fb8de060028a49729cbe0e1f0d7ea8c1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPfsAmAAAAAAAAAAAOAAIiALATAAABwAAAAIAAAAAAAADjsA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALw6AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBsAAAAgAAAAHAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAeAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
OgAAAAAAAEgAAAACAAUAxCUAAEAUAAABAAAAAAAAAAQ6AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswCACCBAAAAQAAESgQAAAKCxIBcgEAAHAoEQAACgoCKBIA
AApvEwAACnIfAABwbxQAAApvFQAACm8WAAAKDAIoEgAACm8TAAAKclUAAHBvFAAACm8VAAAKbxYA
AAoNAigSAAAKbxMAAApykQAAcG8UAAAKbxUAAApvFgAAChMEAigSAAAKbxMAAApyuwAAcG8UAAAK
bxUAAApvFgAAChMFcukAAHATBnIFAQBwEwcbjSMAAAElFnINAQBwoiUXEQSiJRhyIQEAcKIlGREF
oiUackUBAHCiKBcAAApzGAAAChMIEQhvGQAACghygQEAcCgaAAAKEwkWEwo4GAMAABEJEQqaEwty
jwEAcBELKBsAAApzHAAAChMMEQxvGQAAChEMfh0AAAoUbx4AAApvHwAACm8gAAAKEw04XQIAABEN
byEAAAp0KwAAAXKAAgBwbyIAAAp0IwAAARMOFhMPFhMQcpYCAHATEXKWAgBwExJymAIAcBEOKBsA
AAoRDHMjAAAKbyQAAAoTEzjzAQAAEQ86NgEAABETbyUAAAoTEBYTFisgERFywAIAcBIWKCYAAAoo
GwAACignAAAKExERFhdYExYRFhEQMtoRERERbygAAAoXWW8pAAAKExERC28qAAAKCG8qAAAKcpYC
AHBvKwAACnLaAgBwcpYCAHBvKwAACnLmAgBwcpYCAHBvKwAACnLwAgBwcpYCAHBvKwAACnL0AgBw
KCcAAAoTEhESEQ5vKgAACnL4AgBwcpYCAHBvKwAACignAAAKExJy/AIAcBEScioDAHAoLAAAChMV
HI0jAAABJRYRFaIlF3IwAwBwoiUYEQeiJRlyTgMAcKIlGhESoiUbclQDAHCiKBcAAAoTFREVclgD
AHAREXJUAwBwcrYDAHARBigbAAAKbysAAApywgMAcCgtAAAKExURFREIcy4AAApvLwAACiYdjSMA
AAElFnLGAwBwoiUXEQeiJRhyTgMAcKIlGRESoiUacuADAHCiJRsREaIlHHLmAwBwoigXAAAKExQW
ExcrOhETERdvMAAACm8WAAAKExgRFHL6AwBwERhyCAQAcHIMBABwbysAAAooGwAACignAAAKExQR
FxdYExcRFxEQMsARFBEUbygAAAoXWW8pAAAKExQRFHLCAwBwKCcAAAoTFBEUEQhzLgAACm8vAAAK
JhEPF1gTDxETbzEAAAo6Af7//94MERMsBxETbzIAAArcEQ1vMwAACjqX/f//3hURDXUUAAABExkR
GSwHERlvMgAACtzeDBEMLAcRDG8yAAAK3BELCXLwAgBwEQsIcpYCAHBvKwAACnISBABwcvQCAHAG
chIEAHAoLAAACm8rAAAKKCwAAAooNAAACgIoEgAAChZvNQAAChEKF1gTChEKEQmOaT/d/P//EQhv
NgAACt5iExoCKBIAAApvEwAACnIWBABwbxQAAApvFQAACm8WAAAKckoEAHAGcmAEAHAoLQAACig3
AAAKExsRGxEabxYAAApvOAAACgIoEgAAChdvNQAACt4MERssBxEbbzIAAArc3gAqAABBfAAAAgAA
AH0BAAAGAgAAgwMAAAwAAAAAAAAAAgAAAC0BAABwAgAAnQMAABUAAAAAAAAAAgAAAA0BAACnAgAA
tAMAAAwAAAAAAAAAAgAAAFcEAAAcAAAAcwQAAAwAAAAAAAAAAAAAABMAAAAMBAAAHwQAAGIAAAAV
AAABHgIoOQAACioeAig6AAAKKq5+AQAABC0ecmoEAHDQAwAAAig7AAAKbzwAAApzPQAACoABAAAE
fgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKD4AAAoqLnMIAAAGgAMAAAQqAABCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAA0BQAAI34AAKAFAACcBwAAI1N0cmluZ3MAAAAA
PA0AANwEAAAjVVMAGBIAABAAAAAjR1VJRAAAACgSAAAYAgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJ
AwAAAPoBMwAWAAABAAAANQAAAAUAAAAGAAAACQAAAAEAAAA+AAAAAgAAABAAAAABAAAAAgAAAAMA
AAAEAAAAAQAAAAUAAAABAAAAAQAAAAAAYwQBAAAAAAAGAPMC3QUGAIID3QUGAD8CygUPAFEGAAAG
AGwC5gQGANYC5gQGALcC5gQGAGkD5gQGABMD5gQGACwD5gQGAIMC5gQGAJ4CxQMKAEcDEgQKAJUB
EgQGAC0BlAQOABoFIAcOAAoFcQAGAKMFtgYOAFEFcQAGAPgAlAQGACgFlAQGAIsFNAAGAJsElAQG
ACICygUGAP4GlAQGAHMF/QUGAEUF0QQSAPIBTQQSAFMCTQQSAMwBvAQGAAcC3QUKADsEEgQWAJoG
NgEWAO8ANgEGAOEDlAQOAA0FMgUGAJIHNAAOAJEAcQAGAJwAlAQOAOUAZQAOAPgEZQAOALEBZQAO
AG0HZQAOAKEAcQAOAFQFMgUGACUAlAQOAK4AIAcOAKQAMgUGACgBNAAGAJgFNAAGAGABlAQGAAQB
lAQGAHkH5gQAAAAAKwAAAAAAAQABAAEAEACxBAEAOQABAAEAAAAQAAQGYAZlAAEAAwAAARAArQZg
BnkAAwAHAAMBAADZBgAAXQAEAAoAEQCgBBoBEQCFAR4BEQDBACIBBgZdACYBVoDJBikBVoBlASkB
UCAAAAAAhgC3BAYAAQBcJQAAAACGGL0FBgABAGQlAAAAAIMYvQUGAAEAbCUAAAAAkwhvBS0BAQCY
JQAAAACTCG0BMgEBAJ8lAAAAAJMIeQE3AQEApyUAAAAAlggFBz0BAgCuJQAAAACGGL0FBgACALYl
AAAAAJEYwwVCAQIAAAABALMDCQC9BQEAEQC9BQYAGQC9BQoAKQC9BRAAMQC9BRAAOQC9BRAAQQC9
BRAASQC9BRAAUQC9BRAAWQC9BRAAYQC9BRAAaQC9BQYAwQC9BQYA6QC9BRUA+QC9BQYAeQBlB0MA
eQDfA0gAcQDRBk0AAQGWBlMACQGLBFkAEQGgA2AAyQDfA2QAGQHwBmgAgQC9BRAAIQGsBAYAKQGk
Bm4AGQH3BnUAiQC9BRAAMQGPBnsAiQDRAIAAQQHnBosAUQGvBZEAkQA2B2AAWQGLBJYAYQG9BZsA
YQFhBaIAaQFCB6cAcQHfA2QAGQHwBqsAGQHoA6cAGQG+A7EAGQGDBWQAGQG5ALYAGQHwBrwAGQHw
BsMAeQG9BcsAgQGCB6cAaQGqA9IAaQGMANcAoQDqAQYAkQBRB9cAiQG5A9sAAQERBwEAIQHkAQYA
iQFaB+EAkQFWARAAcQC9BQYAyQC9BQYAmQEWAecAmQF1B/AA0QC9BfYA8QC9BQYACAAUABABCAAY
ABUBKQBzAH0BLgALAFUBLgATAF4BLgAbAH0BLgAjAIYBLgArAK8BLgAzAK8BLgA7AK8BLgBDAIYB
LgBLALUBLgBTAK8BLgBbAMwBQwBjABUBSQBzAH0BYQB7ABUBYwBrABUBGwADAAEABAADAAAAcwVG
AQAAjQFLAQAACQdQAQIABAADAAIABQAFAAEABgAFAAIABwAHAASAAAABAAAABh5LbgAAAAAAAAEA
AAAEAAAAAAAAAAAAAAD+AIMAAAAAAA8AAAAAAAAAAAAAAAcB8wMAAAAABAAAAAAAAAAAAAAA/gBl
AAAAAAAEAAAAAAAAAAAAAAD+AJQEAAAAAA8AAAAAAAAAAAAAAAcBPgAAAAAAAAAAAAEAAAAOBgAA
BQACAAAAAAAAU1RfZmI4ZGUwNjAwMjhhNDk3MjljYmUwZTFmMGQ3ZWE4YzEASW50MzIAPE1vZHVs
ZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3Rl
bS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFJlYWQAT2xlRGJTY2hlbWFHdWlkAE9s
ZURiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAEdldE9sZURiU2No
ZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEZpbGUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBXcml0ZUxpbmUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJl
c291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29s
bGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JC
cm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEdldFZhbHVlAHZhbHVlAE1vdmUAUmVt
b3ZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAZ2V0X0xlbmd0aABNaWNyb3Nv
ZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2Ny
aXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfZmI4ZGUw
NjAwMjhhNDk3MjljYmUwZTFmMGQ3ZWE4YzEuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291
cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFs
aXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rp
b24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZv
AE9sZURiRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAVG9VcHBl
cgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9y
AC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2ZiOGRlMDYwMDI4YTQ5NzI5Y2JlMGUxZjBkN2VhOGMxLlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9mYjhkZTA2MDAy
OGE0OTcyOWNiZTBlMWYwZDdlYThjMS5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdl
dEZpbGVzAFNldHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0
UmVzdWx0cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFz
a1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0ZpZWxkQ291bnQA
TW92ZU5leHQAQ3JlYXRlVGV4dABnZXRfTm93AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVO
b25RdWVyeQBEaXJlY3RvcnkAAB15AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMAADUkAFAAcgBv
AGoAZQBjAHQAOgA6AFMAbwB1AHIAYwBlAEYAaQBsAGUARgBvAGwAZABlAHIAADskAFAAcgBvAGoA
ZQBjAHQAOgA6AFAAcgBvAGMAZQBzAHMAZQBkAEYAaQBsAGUARgBvAGwAZABlAHIAACkkAFAAcgBv
AGoAZQBjAHQAOgA6AFMAZQByAHYAZQByAE4AYQBtAGUAAC0kAFAAcgBvAGoAZQBjAHQAOgA6AEQA
YQB0AGEAYgBhAHMAZQBOAGEAbQBlAAAbTgBWAEEAUgBDAEgAQQBSACgANQAwADAAKQAAB2QAYgBv
AAATUwBlAHIAdgBlAHIAIAA9ACAAACM7AEkAbgBpAHQAaQBhAGwAIABDAGEAdABhAGwAbwBnAD0A
ADs7ACAASQBuAHQAZQBnAHIAYQB0AGUAZAAgAFMAZQBjAHUAcgBpAHQAeQAgAD0AIABTAFMAUABJ
ADsAAA0qAC4AWABMAFMAKgAAgO9QAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAu
AEEAQwBFAC4ATwBMAEUARABCAC4AMQAyAC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AHsA
MAB9ADsARQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACcARQB4AGMAZQBs
ACAAMQAyAC4AMAA7AEgARABSAD0AbgBvADsASQBNAEUAWAA9ADEAOwBJAG0AcABvAHIAdABtAGkA
eABlAGQAdAB5AHAAZQBzAD0AdABlAHgAdAA7ACcAARVUAEEAQgBMAEUAXwBOAEEATQBFAAABACdz
AGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAWwB7ADAAfQBdAAAZWwBDAE8ATABVAE0ATgB7ADAA
fQBdACwAAAsuAFgATABTAFgAAAkuAFgATABTAAADXAAAA18AAAMkAAAtRABSAE8AUAAgAFQAQQBC
AEwARQAgAEkARgAgAEUAWABJAFMAVABTACAAWwAABV0AOwAAHSAAQwBSAEUAQQBUAEUAIABUAEEA
QgBMAEUAIAAABS4AWwAAA10AAF0oAFIAbwB3AEkARAAgAEkATgBUACAASQBEAEUATgBUAEkAVABZ
ACgAMQAsADEAKQAgAE4ATwBUACAATgBVAEwATAAgAFAAUgBJAE0AQQBSAFkAIABLAEUAWQAsAAAL
XQAgAHsAMAB9AAADKQAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAAAFXQAoAAATKQAgAFYAQQBM
AFUARQBTACgAAA0nAHsAMAB9ACcALAABAycAAQUnACcAAQMuAAAzJABQAHIAbwBqAGUAYwB0ADoA
OgBFAHIAcgBvAHIARgBpAGwAZQBGAG8AbABkAGUAcgAAFVwARQByAHIAbwByAEwAbwBnAF8AAAku
AGwAbwBnAABxUwBUAF8AZgBiADgAZABlADAANgAwADAAMgA4AGEANAA5ADcAMgA5AGMAYgBlADAA
ZQAxAGYAMABkADcAZQBhADgAYwAxAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAfJrlbcIC2QIXDM738MfHbAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFxJwccDhE9
Dg4ODg4OEkEdDggOEkUSSQ4ICA4OEk0ODggIDhJRElUSWQQAABE9BCABDg4FIAASgIEFIAASgIUG
IAESgIkcAyAAHAMgAA4FAAEOHQ4GAAIdDg4OBQACDg4cBAYRgJ0KIAISgKERgJ0dHAUgABKApQQg
ABJJBCABHA4GIAIBDhJFBCAAEk0DIAAIBQACDg4OBCABDggFIAIODg4GAAMODg4OBwAEDg4ODg4G
IAIBDhJBBCABHAgDIAACBQACAQ4OBQABElkOCAABEoDNEYDRBSAAEoDVByACAQ4SgNUIt3pcVhk0
4IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSaQMGEm0DBhIQAgYIAwYRFAQAABJpBAAAEm0FAAEBEm0E
AAASEAMAAAEECAASaQQIABJtBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25U
aHJvd3MBCAEAAgAAAAAAKAEAI1NUX2ZiOGRlMDYwMDI4YTQ5NzI5Y2JlMGUxZjBkN2VhOGMxAAAF
AQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjEAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43AAC0AAAAzsrvvgEA
AACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9u
PTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4
OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0
AAAA5DoAAAAAAAAAAAAA/joAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA6AAAAAAAAAAAAAAAA
X0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQBLbgYeAAABAEtuBh4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfAGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAAZAA3
AGUAYQA4AGMAMQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADYA
OAA2AC4AMgA4ADIAMwA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABf
AGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAAZAA3AGUA
YQA4AGMAMQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQA
ZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8AZgBiADgAZABlADAANgAwADAAMgA4AGEANAA5ADcAMgA5AGMAYgBlADAAZQAxAGYA
MABkADcAZQBhADgAYwAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfAGYAYgA4AGQAZQAwADYAMAAwADIAOABhADQAOQA3ADIAOQBjAGIAZQAwAGUAMQBmADAA
ZAA3AGUAYQA4AGMAMQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANwA2ADgANgAuADIAOAAyADMANQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANwA2ADgANgAuADIAOAAyADMANQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAQOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="189.6,41.6"
          Id="Package\SCP Load From EXCEL"
          TopLeft="162.142859904134,73.258824525237" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>